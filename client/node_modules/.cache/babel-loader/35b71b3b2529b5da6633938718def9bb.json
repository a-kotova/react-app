{"ast":null,"code":"import * as firebase from 'firebase/app';\n\nrequire('firebase/auth');\n\nrequire('firebase/firestore');\n\nconst config = {\n  apiKey: 'AIzaSyAJlU4bXG3KhA7U3IZIBoRWlg7gWLV2Vhs',\n  authDomain: 'react-app-db-48fa5.firebaseapp.com',\n  databaseURL: 'https://react-app-db-48fa5.firebaseio.com',\n  projectId: 'react-app-db-48fa5',\n  storageBucket: 'react-app-db-48fa5.appspot.com',\n  messagingSenderId: '973549392876',\n  appId: '1:973549392876:web:52c897aff4a46fc178a6c9'\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email,\n      uid\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        uid,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getCurrentUser = () => new Promise((resolve, reject) => {\n  const unsubscribe = auth.onAuthStateChanged(userAuth => {\n    unsubscribe();\n    resolve(userAuth);\n  }, reject);\n});\nexport const addCollectionsAndDocs = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(object => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, object);\n  });\n  return batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/ivan.katsenia/Work/test-react-clothing/src/firebase/firebase.utils.js"],"names":["firebase","require","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","auth","firestore","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","addCollectionsAndDocs","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","object","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase/app';\n\nrequire('firebase/auth');\nrequire('firebase/firestore');\n\nconst config = {\n  apiKey: 'AIzaSyAJlU4bXG3KhA7U3IZIBoRWlg7gWLV2Vhs',\n  authDomain: 'react-app-db-48fa5.firebaseapp.com',\n  databaseURL: 'https://react-app-db-48fa5.firebaseio.com',\n  projectId: 'react-app-db-48fa5',\n  storageBucket: 'react-app-db-48fa5.appspot.com',\n  messagingSenderId: '973549392876',\n  appId: '1:973549392876:web:52c897aff4a46fc178a6c9',\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email, uid } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        uid,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log('Error creating user', error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const getCurrentUser = () => new Promise((resolve, reject) => {\n  const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n    unsubscribe();\n    resolve(userAuth);\n  }, reject);\n});\n\nexport const addCollectionsAndDocs = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((object) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, object);\n  });\n\n  return batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollections = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}